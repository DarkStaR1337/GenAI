import sqlite3
import json
import requests
from langchain_aws import ChatBedrockConverse
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_core.tools import tool
from typing import List, Dict, Any

# Your existing database functions remain the same
def get_auth_token():
    auth_payload = {"username": "USERNAME", "password": "PASSWORD"}
    response = requests.post("API_URL_AUTH", json=auth_payload)
    response_data = response.json()
    return response_data.get("access_token")

def check_app_ownership(user):
    conn = sqlite3.connect(r"IAM/analytics.db")
    try:
        apps = []
        query = "SELECT * FROM app_owner_info WHERE OwnerUserID = ?"
        result = conn.execute(query, (user,)).fetchall()
        if result:
            apps = [item[3] for item in result]
        return apps
    except Exception as e:
        print(f"Error checking request ownership: {e}")
        return False
    finally:
        conn.close()

def get_app_dormant_or_orphan_status(query, user):
    conn = sqlite3.connect(r"IAM/analytics.db")
    try:
        apps = check_app_ownership(user)
        if apps:
            apps_str = "', '".join(apps)
            if 'dormant_account_report' in query:
                if 'WHERE' in query:
                    query += f" AND AppName IN ('{apps_str}')"
                else:
                    query += f" WHERE AppName IN ('{apps_str}')"
            elif 'application_orphan_account' in query:
                if 'WHERE' in query:
                    query += f" AND ApplicationName IN ('{apps_str}')"
                else:
                    query += f" WHERE ApplicationName IN ('{apps_str}')"
            
            results = conn.execute(query).fetchall()
            if not results and ('app_access_info' in query or 'reportee_access_info' in query or 'access_request' in query):
                return "Sorry, you don't have access to this information."
            else:
                return str(results)
    except Exception as e:
        return f"Query failed with error: {e}"
    finally:
        conn.close()

def check_request_ownership(user, req_id):
    conn = sqlite3.connect(r"IAM/analytics.db")
    try:
        query = f"SELECT * FROM access_request WHERE RequestID = ? AND RequestedBy = ?"
        result = conn.execute(query, (req_id, user)).fetchone()
        if result:
            return result
    except Exception as e:
        print(f"Error checking request ownership: {e}")
        return False
    finally:
        conn.close()

def get_access_request_status(req_id, user):
    res = check_request_ownership(user, req_id)
    if res:
        auth_token = get_auth_token()
        headers = {"Authorization": f"Bearer {auth_token}"}
        payload = {
            "analyticsId": "1652",
            "attributes": {
                "reqID": req_id
            }
        }
        
        response = requests.post("API_URL_DATA", headers=headers, json=payload)
        data = response.json()
        
        if data and data.get('results'):
            if all(not value for value in data['results'][0].values()):
                auth_token = get_auth_token()
                headers = {"Authorization": f"Bearer {auth_token}"}
                payload = {
                    "analyticsId": "1652",
                    "attributes": {
                        "reqID": req_id
                    }
                }
                url = ""
                response = requests.post(url, headers=headers, json=payload)
                data_new = response.json()
                if data_new and data_new.get('result'):
                    if all(not value for value in data_new['result'][0].values()):
                        return "NO Data Found"
                    else:
                        data_new['result'][0]['status'] = res[4]
                        return json.dumps(data_new)
            else:
                data['status'] = res[4]
                return json.dumps(data)
        else:
            return "NO Data Found"
    else:
        return "You are not authorized to view this request status."

def get_iam_data(query):
    conn = sqlite3.connect("analytics.db")
    try:
        results = str(conn.execute(query).fetchall())
    except Exception as e:
        results = f"Query failed with error: {e}"
    finally:
        conn.close()
    return results

def get_iam_data_with_user_filter(query, user):
    conn = sqlite3.connect(r"IAM/analytics.db")
    try:
        # Check if certain tables are in the query, and if so, append the appropriate WHERE clause
        if 'app_access_info' in query:
            if 'WHERE' in query:
                query = query + f" AND (UserID = '{user}' OR OwnerUserID = '{user}')"
            else:
                query = query + f" WHERE (UserID = '{user}' OR OwnerUserID = '{user}')"
        if 'reportee_access_info' in query:
            if 'WHERE' in query:
                query = query + f" AND (UserID = '{user}' OR ManagerUserID = '{user}')"
            else:
                query = query + f" WHERE (UserID = '{user}' OR ManagerUserID = '{user}')"
        if 'access_request' in query:
            if 'WHERE' in query:
                query = query + f" AND (RequestedBy = '{user}')"
            else:
                query = query + f" WHERE (RequestedBy = '{user}')"
        
        results = conn.execute(query).fetchall()
        if not results and ('app_access_info' in query or 'reportee_access_info' in query or 'access_request' in query):
            return "Sorry, you don't have access to this information."
        else:
            return str(results)
    except Exception as e:
        return f"Query failed with error: {e}"
    finally:
        conn.close()

# Define tools using LangChain's @tool decorator
@tool
def get_iam_data_tool(query: str) -> str:
    """Useful for getting Identity Access Management (IAM) data from a SQLite database containing IAM access information. The input should be a SQL query to get the required information from an IAM SQLite database, based on the user's question.
    Do not filter for active users unless specified by the user. SQL query must be in accordance to the below table information (table_description)."""
    return get_iam_data(query)

@tool
def get_access_request_status_tool(req_id: str) -> str:
    """Useful for getting the request details of an access request for a single request ID."""
    # Note: We'll need to pass the user context somehow - see modification below
    return "Tool requires user context - see modified version below"

@tool
def get_app_dormant_or_orphan_status_tool(query: str) -> str:
    """Useful for getting the dormant or orphan accounts of applications owned by a specific user."""
    # Note: We'll need to pass the user context somehow - see modification below
    return "Tool requires user context - see modified version below"

# Initialize Bedrock Chat model
def initialize_bedrock_client():
    """Initialize the Bedrock client with AWS Nova Lite model"""
    from langchain_aws import ChatBedrockConverse
    
    chat = ChatBedrockConverse(
        model="amazon.nova-lite-v1:0",  # AWS Nova Lite model
        region_name="us-east-1",  # your AWS region
        # Optional parameters for Nova Lite
        model_kwargs={
            "max_tokens": 4096,
            "temperature": 0.1,  # Lower temperature for more consistent responses
            "top_p": 0.9
        }
        # AWS credentials will be picked up from environment variables, IAM roles, or AWS config
    )
    return chat

def get_response(user, messages):
    # Your existing system prompt
    system_prompt = f"""
    You are a helpful assistant that helps the user get information on Identity Access Management (IAM).
    Understand the user's query, then use the available tools to get the required information. The current userID
    is '{user}'.
    The user query is: {messages[-1]['content']}.
    Use the user's query along with the history of the last conversation to reference data only, nothing else.
    The table descriptions are as follows for get_iam_data(): {{table_description}}.
    Use these descriptions to correlate column names for answering the user's question.

    Instructions:
    1. When creating a query with AppName, use AppName LIKE '%....%' instead of AppName='...'.
    2. If there are 2 records for the same first name, also check the last name. Provide answers according to the user's question.
    3. If the user query includes a Request Id, call get_access_request_status().
    4. If the user asks for Dormant and/or Orphan accounts, call get_app_dormant_or_orphan_status().
    5. Understand the user query and, if necessary, make multiple tool calls to the same or different function.
    6. If the user requests data in a tabular format, provide the final response as a markdown string for the tabular data.
    7. Understand the user query completely and answer appropriately, consistently, and completely to all subparts (if any).
    8. Do not reveal the SQL query or internal processing in the final response. Never if necessary and always provide the correct response.
    9. When asked for the status of a request, consider the column "TaskStatus" or "AccountStatus" not "Status".
    10. Do not return columns that are not necessary for the user's query.
    11. Provide maximum relevant details.
    12. If fetching a list of users, run two tool calls: the first for fetching the complete records without limiting and the second for the total number of rows. Then return both results.
    13. Do not add "%" in the queries created.
    14. No Unions make two tool calls if required from two separate tables because column names are different.
    15. Be consistent with your answers and do not hallucinate.
    16. When asked for "orphan or dormant accounts" make two tool calls, one for dormant one for orphan and do not put any check/filter in the query.
    17. When asked for managers's status, make two tool calls, one for finding who is the manager and one for finding the status for the manager name.
    18. Retry if necessary internally but do not give incomplete answers.Do not generate final answer with information that is not required.
    19. Be consistent with your answers and do not hallucinate.
    20. When asked for reportees. Return only the reportees with active status.
    """

    # Initialize Bedrock client
    chat = initialize_bedrock_client()
    
    # Create tools list - we need to modify this for user context
    tools = [get_iam_data_tool]
    
    # For tools that need user context, we'll create them dynamically
    @tool
    def get_access_request_status_with_user(req_id: str) -> str:
        """Useful for getting the request details of an access request for a single request ID."""
        return get_access_request_status(req_id, user)
    
    @tool
    def get_app_dormant_or_orphan_status_with_user(query: str) -> str:
        """Useful for getting the dormant or orphan accounts of applications owned by a specific user."""
        return get_app_dormant_or_orphan_status(query, user)
    
    tools.extend([get_access_request_status_with_user, get_app_dormant_or_orphan_status_with_user])
    
    # Bind tools to the chat model
    chat_with_tools = chat.bind_tools(tools)
    
    # Convert your message format to LangChain format
    langchain_messages = []
    
    # Add system message
    langchain_messages.append(SystemMessage(content=system_prompt))
    
    # Convert conversation history
    for msg in messages:
        if msg.get("role") == "human" or msg.get("role") == "user":
            langchain_messages.append(HumanMessage(content=msg["content"]))
        # Note: Assistant messages and tool results will be handled by the chain
    
    # Get the latest user message
    latest_message = messages[-1]["content"]
    
    # Invoke the model with tools
    try:
        response = chat_with_tools.invoke(langchain_messages)
        
        # Handle tool calls if present
        if response.tool_calls:
            # Execute tool calls
            for tool_call in response.tool_calls:
                tool_name = tool_call["name"]
                tool_args = tool_call["args"]
                
                # Find and execute the appropriate tool
                for tool in tools:
                    if tool.name == tool_name:
                        try:
                            tool_result = tool.invoke(tool_args)
                            # You might want to store this result and continue the conversation
                            # For now, we'll just include it in a follow-up call
                        except Exception as e:
                            tool_result = f"Error executing tool: {e}"
                        break
                
                # Add tool result to messages and call model again
                langchain_messages.append(response)
                # Add tool result message (this depends on your specific tool calling implementation)
                
            # Make another call with tool results
            final_response = chat_with_tools.invoke(langchain_messages)
            return final_response.content
        else:
            return response.content
            
    except Exception as e:
        return f"Error generating response: {e}"

# Alternative approach using LangChain's tool calling agent (Recommended)
def get_response_with_agent(user, messages):
    from langchain.agents import create_tool_calling_agent, AgentExecutor
    from langchain_core.prompts import ChatPromptTemplate
    
    # Your system prompt
    system_prompt = f"""
    You are a helpful assistant that helps the user get information on Identity Access Management (IAM).
    The current userID is '{user}'.
    [Include all your existing instructions here]
    """
    
    # Create prompt template
    prompt = ChatPromptTemplate.from_messages([
        ("system", system_prompt),
        ("human", "{input}"),
        ("placeholder", "{agent_scratchpad}"),
    ])
    
    # Initialize BedrockConverse client
    chat = initialize_bedrock_client()
    
    # Create tools with user context
    @tool
    def get_access_request_status_with_user(req_id: str) -> str:
        """Useful for getting the request details of an access request for a single request ID."""
        return get_access_request_status(req_id, user)
    
    @tool
    def get_app_dormant_or_orphan_status_with_user(query: str) -> str:
        """Useful for getting the dormant or orphan accounts of applications owned by a specific user."""
        return get_app_dormant_or_orphan_status(query, user)
    
    tools = [get_iam_data_tool, get_access_request_status_with_user, get_app_dormant_or_orphan_status_with_user]
    
    # Create agent
    agent = create_tool_calling_agent(chat, tools, prompt)
    agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)
    
    # Get latest user message
    latest_message = messages[-1]["content"]
    
    try:
        result = agent_executor.invoke({"input": latest_message})
        return result["output"]
    except Exception as e:
        return f"Error generating response: {e}"

# Example usage (keeping the same interface as your original function)
def main():
    user = "test_user"
    messages = [{"role": "user", "content": "Show me all access requests"}]
    
    response = get_response(user, messages)
    print(response)